name: Android SDK CI

on:
  push:
    branches:
      - main
  # Build on all pull requests, regardless of target.
  pull_request:

jobs:
  build:
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Restore gradle.properties
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
        shell: bash
        run: |
          mkdir -p ~/.gradle/
          echo "GRADLE_USER_HOME=${HOME}/.gradle" >> $GITHUB_ENV
          echo "MAVEN_USERNAME=${MAVEN_USERNAME}" > ~/.gradle/gradle.properties
          echo "MAVEN_PASSWORD=${MAVEN_PASSWORD}" >> ~/.gradle/gradle.properties

      - name: Build with Gradle
        run: ./gradlew build

  unit-tests:
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Restore gradle.properties
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }} #TODO: populate
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }} #TODO: populate
        shell: bash
        run: |
          mkdir -p ~/.gradle/
          echo "GRADLE_USER_HOME=${HOME}/.gradle" >> $GITHUB_ENV
          echo "MAVEN_USERNAME=${MAVEN_USERNAME}" > ~/.gradle/gradle.properties
          echo "MAVEN_PASSWORD=${MAVEN_PASSWORD}" >> ~/.gradle/gradle.properties

      - name: Build with Gradle
        run: make unit-test

  instrumentation-tests:
    runs-on: macos-latest
    timeout-minutes: 30
    strategy:
      # Allow tests to continue on other devices if they fail on one device.
      fail-fast: false
      matrix:
        api-level: [ 34 ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          repository: Eppo-exp/sdk-test-data
          path: test-data

      # the macos github action images have docker installed but the daemon is not
      # automatically started. this means we cannot use services since those run
      # before the steps.
      - name: Set up Docker
        uses: crazy-max/ghaction-setup-docker@v1

      - name: Start nginx container
        run: |
          docker run -d -p 8080:80 -v ${{ github.workspace }}/test-data:/usr/share/nginx/html:ro nginx:latest

      - name: Test with curl
        run: curl http://localhost:8080/rac-experiments-v3.json

      - name: Check out Android SDK
        uses: actions/checkout@v3
        with:
          repository: Eppo-exp/android-sdk
          path: android-sdk

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: 'Set up GCP SDK'
        uses: 'google-github-actions/setup-gcloud@v0'

      - name: Restore gradle.properties
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }} #TODO: populate
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }} #TODO: populate
        shell: bash
        run: |
          mkdir -p ~/.gradle/
          echo "GRADLE_USER_HOME=${HOME}/.gradle" >> $GITHUB_ENV
          echo "MAVEN_USERNAME=${MAVEN_USERNAME}" > ~/.gradle/gradle.properties
          echo "MAVEN_PASSWORD=${MAVEN_PASSWORD}" >> ~/.gradle/gradle.properties

      - name: Gradle cache
        uses: gradle/gradle-build-action@v2

      - name: AVD cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}

      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          profile: 29 # pixel 7
          target: google_apis
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: run tests
        uses: reactivecircus/android-emulator-runner@v2
        continue-on-error: true # IMPORTANT: allow pipeline to continue to Android Test Report step
        with:
          api-level: ${{ matrix.api-level }}
          profile: 29 # pixel 7
          target: google_apis
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            adb logcat -c                                       # clear logs
            mkdir -p app/                                       # create directory
            touch app/emulator.log                              # create log file
            chmod 777 app/emulator.log                          # allow writing to log file
            adb logcat EppoSDK:D "*:S" >> app/emulator.log &   # pipe all logcat messages into log file as a background process
            make instrumentation-test                           # run our tests   

      - name: Upload Failing Test Report Log
        if: steps.testing.outcome != 'success'        # upload the generated log on failure of the tests job
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: app/emulator.log # path to where the log is

      - name: Raise error on test fail # set a red tick on the workflow run if the tests failed
        if: steps.testing.outcome != 'success'
        run: exit 1
