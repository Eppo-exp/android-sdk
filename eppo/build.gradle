plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'signing'
    id "com.diffplug.spotless" version "7.0.0.BETA2"
}

group = "cloud.eppo"
version = "4.0.0-SNAPSHOT"

android {
    buildFeatures.buildConfig true
    compileSdk 33

    defaultConfig {
        namespace "cloud.eppo.android"
        minSdk 24
        targetSdk 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        def EPPO_VERSION = "EPPO_VERSION"

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", EPPO_VERSION, "\"${project.properties.get("version")}\""
            matchingFallbacks = ['release']
        }

        debug {
            minifyEnabled false
            buildConfigField "String", EPPO_VERSION, "\"${project.properties.get("version")}\""
            matchingFallbacks = ['debug']
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    packagingOptions {
        resources {
            excludes += "META-INF/**"
        }
    }

    publishing {
        singleVariant('release') {
            withSourcesJar()
            withJavadocJar()
        }
    }
}

ext {}
ext.versions = [
    "junit": "4.13.2",
    "mockito": "3.+",
    "roboelectric": "4.12+",
    "androidx_junit": "1.1.5",
    "androidx_test_core": "1.5.0",
    "androidx_runner": "1.5.2",
    "androidx_core": "1.9.0",
    "gson": "2.9.1",
    "okhttp": "4.12.0",
    "commonsio": "2.14.0",
    "semver": "0.10.2"
]

dependencies {
    api 'cloud.eppo:sdk-common-jvm:3.3.0-SNAPSHOT'

    implementation 'org.slf4j:slf4j-api:2.0.16'
    implementation 'uk.uuid.slf4j:slf4j-android:2.0.7-0'

    implementation "androidx.core:core:${versions.androidx_core}"
    implementation 'commons-io:commons-io:2.17.0'
    implementation "com.squareup.okhttp3:okhttp:${versions.okhttp}"
    implementation "com.github.zafarkhaja:java-semver:${versions.semver}"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.17.2"

    testImplementation "junit:junit:${versions.junit}"
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
    testImplementation "org.robolectric:robolectric:${versions.roboelectric}"
    androidTestImplementation "org.mockito:mockito-android:${versions.mockito}"
    androidTestImplementation "androidx.test.ext:junit:${versions.androidx_junit}"
    androidTestImplementation "androidx.test:core:${versions.androidx_test_core}"
    androidTestImplementation "androidx.test:runner:${versions.androidx_runner}"
    androidTestImplementation "commons-io:commons-io:${versions.commonsio}"
}

spotless {
    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '.gitattributes', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces(2) // or spaces. Takes an integer argument if you don't like 4
        endWithNewline()
    }
    java {
        target '**/*.java'
        // apply a specific flavor of google-java-format
        googleJavaFormat()
        // fix formatting of type annotations
        formatAnnotations()
    }
}

publishing {
    publications {
        release(MavenPublication) {
            groupId = 'cloud.eppo'
            artifactId = 'android-sdk'
            version = project.properties.get("version")

            afterEvaluate {
                from components.release
            }

            pom {
                name = 'Eppo Android'
                description = 'Eppo Android SDK'
                url = 'https://github.com/Eppo-exp/android-sdk'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }
                developers {
                    developer {
                        name = 'Eppo'
                        email = 'https://www.geteppo.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/Eppo-exp/android-sdk.git'
                    developerConnection = 'scm:git:ssh://github.com/Eppo-exp/android-sdk.git'
                    url = 'https://github.com/Eppo-exp/android-sdk/tree/main'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = project.properties.containsKey("ossrhUsername") ? project.properties["ossrhUsername"] : ""
                password = project.properties.containsKey("ossrhPassword") ? project.properties["ossrhPassword"] : ""
            }
        }
    }
}

// Custom task to ensure we can conditionally publish either a release or snapshot artifact
// based on a command line switch. See github workflow files for more details on usage.
task checkVersion {
    doLast {
        if (!project.hasProperty('release') && !project.hasProperty('snapshot')) {
            throw new GradleException("You must specify either -Prelease or -Psnapshot")
        }
        if (project.hasProperty('release') && project.version.endsWith('SNAPSHOT')) {
            throw new GradleException("You cannot specify -Prelease with a SNAPSHOT version")
        }
        if (project.hasProperty('snapshot') && !project.version.endsWith('SNAPSHOT')) {
            throw new GradleException("You cannot specify -Psnapshot with a non-SNAPSHOT version")
        }
        project.ext.shouldPublish = true
    }
}

// Ensure checkVersion runs before publishing
tasks.named('publish').configure {
    dependsOn checkVersion
}

// Conditionally enable or disable publishing tasks
tasks.withType(PublishToMavenRepository) {
    onlyIf {
        project.ext.has('shouldPublish') && project.ext.shouldPublish
    }
}

signing {
    sign publishing.publications.release
    if (System.env['CI']) {
        useInMemoryPgpKeys(System.env.GPG_PRIVATE_KEY, System.env.GPG_PASSPHRASE)
    }
}
